// <auto-generated />
using System;
using CerenElektronik_Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CerenElektronik_Backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240823081944_UpdatePerformerTable")]
    partial class UpdatePerformerTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CerenElektronik_Backend.Models.Performer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionRequired")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Assignee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Customer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FourthInstaller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iatd1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("bit");

                    b.Property<string>("LeadInstaller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pictures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProgressDailyReport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuotationNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RfTestHandOverD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondInstaller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdInstaller")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("TimeLogged")
                        .HasColumnType("float");

                    b.Property<double?>("TimeLoggedRolledUp")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Performers");
                });

            modelBuilder.Entity("CerenElektronik_Backend.Models.Quotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Invoiced")
                        .HasColumnType("bit");

                    b.Property<bool?>("PassiveShieldingNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("PerformerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PoOrPrePaymentRecievedForProduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreparedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("QuotationAmount")
                        .HasColumnType("real");

                    b.Property<string>("QuotationFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RFID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RevisionStatus")
                        .HasColumnType("int");

                    b.Property<string>("SentTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TaskCustomID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Quotations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryCode = "US",
                            Currency = "USD",
                            CustomerName = "CustomerA",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 530, DateTimeKind.Local).AddTicks(657),
                            DeviceName = "DeviceA",
                            Invoiced = false,
                            PassiveShieldingNeeded = true,
                            PerformerId = "P001",
                            PoFile = "poA.pdf",
                            PoOrPrePaymentRecievedForProduction = "Yes",
                            PreparedBy = "PreparerA",
                            QuotationAmount = 1000f,
                            QuotationFile = "quotationA.pdf",
                            RFID = "RFID001",
                            RegionName = "North",
                            RequestedBy = "RequesterA",
                            RevisionStatus = 1,
                            SentTo = "customerA@example.com",
                            Status = 2,
                            TaskCustomID = "T001",
                            TaskName = "Install new system"
                        },
                        new
                        {
                            Id = 2,
                            CountryCode = "FR",
                            Currency = "EUR",
                            CustomerName = "CustomerB",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2469),
                            DeviceName = "DeviceB",
                            Invoiced = true,
                            PassiveShieldingNeeded = false,
                            PerformerId = "P002",
                            PoFile = "poB.pdf",
                            PoOrPrePaymentRecievedForProduction = "No",
                            PreparedBy = "PreparerB",
                            QuotationAmount = 2000f,
                            QuotationFile = "quotationB.pdf",
                            RFID = "RFID002",
                            RegionName = "South",
                            RequestedBy = "RequesterB",
                            RevisionStatus = 0,
                            SentTo = "customerB@example.com",
                            Status = 0,
                            TaskCustomID = "T002",
                            TaskName = "Upgrade existing system"
                        },
                        new
                        {
                            Id = 3,
                            CountryCode = "UK",
                            Currency = "GBP",
                            CustomerName = "CustomerC",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2486),
                            DeviceName = "DeviceC",
                            Invoiced = true,
                            PassiveShieldingNeeded = true,
                            PerformerId = "P003",
                            PoFile = "poC.pdf",
                            PoOrPrePaymentRecievedForProduction = "Yes",
                            PreparedBy = "PreparerC",
                            QuotationAmount = 1500f,
                            QuotationFile = "quotationC.pdf",
                            RFID = "RFID003",
                            RegionName = "East",
                            RequestedBy = "RequesterC",
                            RevisionStatus = 2,
                            SentTo = "customerC@example.com",
                            Status = 4,
                            TaskCustomID = "T003",
                            TaskName = "System maintenance"
                        },
                        new
                        {
                            Id = 4,
                            CountryCode = "JP",
                            Currency = "JPY",
                            CustomerName = "CustomerD",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2490),
                            DeviceName = "DeviceD",
                            Invoiced = false,
                            PassiveShieldingNeeded = false,
                            PerformerId = "P004",
                            PoFile = "poD.pdf",
                            PoOrPrePaymentRecievedForProduction = "No",
                            PreparedBy = "PreparerD",
                            QuotationAmount = 2500f,
                            QuotationFile = "quotationD.pdf",
                            RFID = "RFID004",
                            RegionName = "West",
                            RequestedBy = "RequesterD",
                            RevisionStatus = 0,
                            SentTo = "customerD@example.com",
                            Status = 2,
                            TaskCustomID = "T004",
                            TaskName = "Replace faulty component"
                        },
                        new
                        {
                            Id = 5,
                            CountryCode = "AU",
                            Currency = "AUD",
                            CustomerName = "CustomerE",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2494),
                            DeviceName = "DeviceE",
                            Invoiced = true,
                            PassiveShieldingNeeded = true,
                            PerformerId = "P005",
                            PoFile = "poE.pdf",
                            PoOrPrePaymentRecievedForProduction = "Yes",
                            PreparedBy = "PreparerE",
                            QuotationAmount = 1800f,
                            QuotationFile = "quotationE.pdf",
                            RFID = "RFID005",
                            RegionName = "Central",
                            RequestedBy = "RequesterE",
                            RevisionStatus = 1,
                            SentTo = "customerE@example.com",
                            Status = 0,
                            TaskCustomID = "T005",
                            TaskName = "Install security update"
                        },
                        new
                        {
                            Id = 6,
                            CountryCode = "CA",
                            Currency = "CAD",
                            CustomerName = "CustomerF",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2498),
                            DeviceName = "DeviceF",
                            Invoiced = false,
                            PassiveShieldingNeeded = false,
                            PerformerId = "P006",
                            PoFile = "poF.pdf",
                            PoOrPrePaymentRecievedForProduction = "No",
                            PreparedBy = "PreparerF",
                            QuotationAmount = 2200f,
                            QuotationFile = "quotationF.pdf",
                            RFID = "RFID006",
                            RegionName = "North",
                            RequestedBy = "RequesterF",
                            RevisionStatus = 2,
                            SentTo = "customerF@example.com",
                            Status = 0,
                            TaskCustomID = "T006",
                            TaskName = "Calibration of equipment"
                        },
                        new
                        {
                            Id = 7,
                            CountryCode = "US",
                            Currency = "USD",
                            CustomerName = "CustomerG",
                            DateCreated = new DateTime(2024, 8, 23, 11, 19, 44, 531, DateTimeKind.Local).AddTicks(2501),
                            DeviceName = "DeviceG",
                            Invoiced = true,
                            PassiveShieldingNeeded = true,
                            PerformerId = "P007",
                            PoFile = "poG.pdf",
                            PoOrPrePaymentRecievedForProduction = "Yes",
                            PreparedBy = "PreparerG",
                            QuotationAmount = 1300f,
                            QuotationFile = "quotationG.pdf",
                            RFID = "RFID007",
                            RegionName = "East",
                            RequestedBy = "RequesterG",
                            RevisionStatus = 1,
                            SentTo = "customerG@example.com",
                            Status = 3,
                            TaskCustomID = "T007",
                            TaskName = "Conduct system audit"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
